// Move doMove(Move m) / void undoMove(Move m)
// doMoveは盤面を戻す情報を含めた指し手を返す
// undoMoveはdoMoveから返された手を用いて指される前の盤面に戻す
auto ACTMove(Move m) @nogc {
  _teban = ~_teban;
  uint to = m.getTo;
  byte movId, capId;
  if (m.isDrop) {
    //打つ手
    final switch (cast(komaType) m.getDropPiece) {
      mixin(q{
        case komaType.YYXX:
          static if ("XX".startsWith("FU", "KY", "KE", "GI", "KA", "HI", "KI")) {
            static if ("ACT" == "do") { _masu[to] = komaType.YYXX; }
            static if ("ACT" == "do") { _mochigomaYY.remXX; }
            static if ("ACT" == "undo") { _masu[to] = komaType.none; }
            static if ("ACT" == "undo") { _mochigomaYY.addXX; }
            static if ("ACT" == "do") { movId = fetchId(81 + IndexPP.YY_hand_XX + _mochigomaYY.numXX + 1); }
            static if ("ACT" == "do") { write40(movId, to, IndexPP.YY_XX + to); }
            static if ("ACT" == "undo") { movId = fetchId(to); }
            static if ("ACT" == "undo") { write40(movId, 81 + IndexPP.YY_hand_XX + _mochigomaYY.numXX, IndexPP.YY_hand_XX + _mochigomaYY.numXX);}
            _bbYYXX ^= MASK_SQ[to];
            _bbOccupyYY ^= MASK_SQ[to];
            _bbOccupy ^= MASK_SQ[to];
            _boardHash.update(to, komaType.YYXX);
            break;
          }
          assert(false);
      }.generateReplace("YY", [ "B", "W" ])
                .generateReplace("XX", KOMA));
      case komaType.none:
        assert(false);
    }
  } else {
    //移動する手
    uint from = m.getFrom;
    static if ("ACT" == "do") { m.setUndoInfo(_masu[from], _masu[to]); }
    static if ("ACT" == "do") { _masu[from] = komaType.none; }
    static if ("ACT" == "undo") { _masu[to] = komaType.none; }
    static if ("ACT" == "do") { movId = fetchId(from); }
    static if ("ACT" == "undo") { movId = fetchId(to); }
    static if ("ACT" == "do") { capId = fetchId(to); }

    //成りフラグを含めた駒別の処理
    final switch (cast(komaTypeWP) m.getMovePieceWithIsPromote) {
      mixin(q{
        case komaTypeWP.YYXX:
          static if ("ACT" == "do") { _masu[to] = komaType.YYXX; }
          static if ("ACT" == "undo") { _masu[from] = komaType.YYXX; }
          static if ("ACT" == "do") { write40(movId, to, IndexPP.YY_XX + to); }
          static if ("ACT" == "undo") { write40(movId, from, IndexPP.YY_XX + from); }
          _bbYYXX ^= MASK_SQ[from] | MASK_SQ[to];
          _bbOccupyYY ^= MASK_SQ[from] | MASK_SQ[to];
          _bbOccupy ^= MASK_SQ[from] | MASK_SQ[to];
          _boardHash.update(from, komaType.YYXX);
          _boardHash.update(to, komaType.YYXX);
          break;
          //成り
          static if ("XX".startsWith("FU", "KY", "KE", "GI", "KA", "HI")) {
            case komaTypeWP.YYXXp:
              static if ("ACT" == "do") { _masu[to] = komaType.YYpXX; }
              static if ("ACT" == "undo") { _masu[from] = komaType.YYXX; }
              static if ("ACT" == "do") { write40(movId, to, IndexPP.YY_pXX + to); }
              static if ("ACT" == "undo") { write40(movId, from, IndexPP.YY_XX + from); }
              _bbYYXX ^= MASK_SQ[from];
              _bbYYpXX ^= MASK_SQ[to];
              _bbOccupyYY ^= MASK_SQ[from] | MASK_SQ[to];
              _bbOccupy ^= MASK_SQ[from] | MASK_SQ[to];
              _boardHash.update(from, komaType.YYXX);
              _boardHash.update(to, komaType.YYpXX);
              break;
          }
      }.generateReplace("YY", [ "B", "W" ])
                .generateReplace("XX", KOMA));
      case komaTypeWP.none:
        assert(false);
    }
  }
  final switch (cast(komaType) m.getCapture) {
    mixin(q{
      case komaType.YYXX:
        static if ("ACT" == "do") { _mochigomaZZ.addXX; }
        static if ("ACT" == "undo") { _mochigomaZZ.remXX; }
        static if ("ACT" == "undo") { _masu[to] = komaType.YYXX; }
        static if ("ACT" == "do") { write40(capId, 81 + IndexPP.ZZ_hand_XX + _mochigomaZZ.numXX, IndexPP.ZZ_hand_XX + _mochigomaZZ.numXX);}
        static if ("ACT" == "undo") { capId = fetchId(81 + IndexPP.ZZ_hand_XX + _mochigomaZZ.numXX + 1); }
        static if ("ACT" == "undo") { write40(capId, to, IndexPP.YY_XX + to); }
        _bbYYXX ^= MASK_SQ[to];
        _bbOccupyYY ^= MASK_SQ[to];
        _bbOccupy ^= MASK_SQ[to];
        _boardHash.update(to, komaType.YYXX);
        break;
    }.generateReplace("YY", "ZZ", [ "B", "W" ])
              .generateReplace("XX", KOMA));
    case komaType.none:
      break;
  }
  static if ("ACT" == "do") { return m; }
}
